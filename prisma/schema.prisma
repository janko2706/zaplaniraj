// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id         String     @id @default(cuid())
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  isBussines Boolean
  business   Business?  @relation(fields: [businessId], references: [id], onDelete: Cascade)
  businessId String?    @unique
  onboarding String
  clerkId    String     @unique
  userPlans  UserPlan[]
  favorites  String?

  @@index([clerkId])
  @@index([businessId])
}

model UserPlan {
  id               String           @id @default(cuid())
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  category         PlanCategory     @default(SLAVLJE)
  businessesInPlan CompanyPost[]
  name             String
  color            String           @default("bg-white")
  tasks            PlanTask[]
  budget           Int              @default(0)
  user             User             @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  userId           String
  progress         PlanProgress     @default(INPROGRESS)
  dateItem         PlanDateItem[]
  budgetItem       PlanBudgetItem[]

  @@index([userId])
}

enum PlanCategory {
  VJENCANJE
  RODENDAN
  SAKRAMENT
  SLAVLJE
}

enum PlanProgress {
  INPROGRESS
  COMPLETED
}

model PlanDateItem {
  id         Int       @id @default(autoincrement())
  title      String
  date       String
  UserPlan   UserPlan? @relation(fields: [userPlanId], references: [id], onDelete: Cascade)
  userPlanId String?

  @@index([userPlanId])
}

model PlanBudgetItem {
  id         Int       @id @default(autoincrement())
  title      String
  price      Int
  UserPlan   UserPlan? @relation(fields: [userPlanId], references: [id], onDelete: Cascade)
  userPlanId String?

  @@index([userPlanId])
}

model PlanTask {
  id                     Int                   @id @default(autoincrement())
  content                String
  UserPlan               UserPlan?             @relation(fields: [userPlanId], references: [id], onDelete: Cascade)
  userPlanId             String?
  forWhat                BusinessTypeCategory? @relation(fields: [BusinessTypeCategoryId], references: [id])
  BusinessTypeCategoryId Int?
  status                 PlanProgress          @default(INPROGRESS)

  @@index([BusinessTypeCategoryId])
  @@index([userPlanId])
}

model Business {
  id               String               @id @default(cuid())
  user             User?
  typeOfBusiness   BusinessTypeCategory @relation(fields: [typeOfBusinessId], references: [id])
  typeOfBusinessId Int
  name             String
  stripeId         String?
  hasPost          Boolean?             @default(false)
  postIsLive       Boolean?             @default(false)
  freeTrial        Boolean
  companyPost      CompanyPost?         @relation(fields: [companyPostId], references: [id], onDelete: Cascade)
  companyPostId    Int?                 @unique

  @@index([typeOfBusinessId])
}

model CompanyPost {
  id                    Int             @id @default(autoincrement())
  isLive                Boolean         @default(false)
  title                 String
  priceRangeMin         Int?
  priceRangeMax         Int?
  companyDescription    String?
  serviceDescription    String?
  selectedCategoriesIds EventCategory[]
  pictures              String?         @db.VarChar(3000)
  location              String?
  lat                   Float?
  lng                   Float?
  maximumPeople         Int?
  earlisetAvailable     String?
  userCanVisit          Boolean?
  tags                  String?
  parkingPlaces         Int?
  offerPictures         String?         @db.VarChar(3000)
  placeSize             String?
  contactPhones         String?
  statistics            Statistic       @relation(fields: [statisticId], references: [id], onDelete: Cascade)
  contactEmails         String?
  reviews               Review[]
  website               String?
  instagramLink         String?
  facebookLink          String?
  business              Business?
  statisticId           Int             @unique
  UserPlan              UserPlan?       @relation(fields: [userPlanId], references: [id])
  userPlanId            String?
  prices                PostPrice[]

  @@index([userPlanId])
}

model PostPrice {
  id            Int          @id @default(autoincrement())
  name          String
  price         Int
  unit          String
  CompanyPost   CompanyPost? @relation(fields: [companyPostId], references: [id])
  companyPostId Int?
  maximum       Int

  @@index([companyPostId])
}

model Statistic {
  id                 Int @id @default(autoincrement())
  averageReviewGrade Int @default(5)
  visitors           Int @default(0)
  numberOfReviews    Int @default(0)
  January            Int @default(0)
  February           Int @default(0)
  March              Int @default(0)
  April              Int @default(0)
  May                Int @default(0)
  June               Int @default(0)
  July               Int @default(0)
  August             Int @default(0)
  September          Int @default(0)
  October            Int @default(0)
  November           Int @default(0)
  December           Int @default(0)
  Weddings           Int @default(0)
  Birthdays          Int @default(0)
  Sacraments         Int @default(0)
  Celebrations       Int @default(0)
  Business           Int @default(0)

  CompanyPost CompanyPost?
}

model Review {
  id            Int          @id @default(autoincrement())
  starts        Int
  reviewText    String
  userName      String
  createdAt     DateTime     @default(now())
  likes         Int
  CompanyPost   CompanyPost? @relation(fields: [companyPostId], references: [id])
  companyPostId Int?

  @@index([companyPostId])
}

model EventCategory {
  id          Int           @id @default(autoincrement())
  value       String
  label       String
  companyPost CompanyPost[]
}

model BusinessTypeCategory {
  id         Int        @id @default(autoincrement())
  value      String
  label      String
  businesses Business[]
  PlanTask   PlanTask[]
}
